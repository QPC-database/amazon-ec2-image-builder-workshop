AWSTemplateFormatVersion: 2010-09-09
Description: Image Builder Pipeline for component workshop

Parameters:
  Prefix:
    Default: ib-component-workshop
    Description: Prefix for the Pipeline, Image, etc.
    Type: String
    AllowedPattern: ^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,100}[-_A-Za-z-0-9]$
  BaseImage:
    Default: windows-server-2019-english-full-base-x86
    Description: Which Image Builder parent image to use.
    Type: String

Resources:
  RootRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/EC2InstanceProfileForImageBuilder"
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"

  IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref RootRole

  ImagePipelineParameters:
    Type: "AWS::ImageBuilder::ImagePipeline"
    Properties:
      Name: !Sub ${Prefix}-pipeline
      ImageRecipeArn: !Ref Recipe
      InfrastructureConfigurationArn: !Ref InfraConfig
      DistributionConfigurationArn: !Ref DistConfig
      Schedule:
        ScheduleExpression: "cron(0 9 * * *)"
        PipelineExecutionStartCondition: "EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE"
      Status: "ENABLED"

  InfraConfig:
    Type: "AWS::ImageBuilder::InfrastructureConfiguration"
    Properties:
      Name: !Sub ${Prefix}-infra-config
      InstanceProfileName: !Ref IamInstanceProfile
      InstanceTypes:
        - "c5.large"
      TerminateInstanceOnFailure: true

  Recipe:
    Type: "AWS::ImageBuilder::ImageRecipe"
    Properties:
      Name: !Sub ${Prefix}-recipe
      Version: "1.0.0"
      ParentImage: !Sub "arn:aws:imagebuilder:${AWS::Region}:aws:image/${BaseImage}/x.x.x"
      Components:
        - ComponentArn: !Join
            - ""
            - - !Sub arn:aws:imagebuilder:${AWS::Region}:${AWS::AccountId}:component/
              - !Select [1, !Split ["/", !Ref ComponentInstallIIS]]
              - /x.x.x
        - ComponentArn: !Join
            - ""
            - - !Sub arn:aws:imagebuilder:${AWS::Region}:${AWS::AccountId}:component/
              - !Select [1, !Split ["/", !Ref ComponentInstallPester]]
              - /x.x.x
        - ComponentArn: !Join
            - ""
            - - !Sub arn:aws:imagebuilder:${AWS::Region}:${AWS::AccountId}:component/
              - !Select [1, !Split ["/", !Ref ComponentValidateIIS]]
              - /x.x.x

  DistConfig:
    Type: AWS::ImageBuilder::DistributionConfiguration
    Properties:
      Name: !Sub ${Prefix}-distribution
      Distributions:
        - AmiDistributionConfiguration:
            Name: !Sub "${Prefix} - {{ imagebuilder:buildDate }}"
            amiTags:
              auto-delete: "no"
            LaunchPermissionConfiguration:
              UserGroups:
                - "all"
          Region: !Sub ${AWS::Region}

  ComponentInstallIIS:
    Type: AWS::ImageBuilder::Component
    Properties:
      Name: !Sub ${Prefix}-install-iis
      Platform: Windows
      Version: 1.0.0
      Data: |
        name: install-iis
        description: Installs IIS on Windows Server 2019
        schemaVersion: "1.0"
        phases:
          - name: build
            steps:
              - name: install-iis
                action: ExecutePowerShell
                timeoutSeconds: 120
                maxAttempts: 3
                inputs:
                  commands:
                    - Install-WindowsFeature Web-Server -ErrorAction stop
              - name: validate-iis
                action: ExecutePowerShell
                timeoutSeconds: 120
                maxAttempts: 3
                inputs:
                  commands:
                    - 'if (!(Get-WindowsFeature "web-server").installed) {throw "NOT INSTALLED"} else {"OK: web-server is installed"}'

  ComponentInstallPester:
    Type: AWS::ImageBuilder::Component
    Properties:
      Name: !Sub ${Prefix}-install-pester
      Platform: Windows
      Version: 1.0.0
      Data: |
        name: install-pester
        description: "Install latest version of Pester"
        schemaVersion: "1.0"
        phases:
          - name: build
            steps:
              - name: install-pester
                action: ExecutePowerShell
                timeoutSeconds: 120
                maxAttempts: 3
                inputs:
                  commands:
                    - |-
                      $ErrorActionPreference = 'stop'
                      [Net.ServicePointManager]::SecurityProtocol = [Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::Tls12
                      Install-PackageProvider -Name NuGet -Force -Scope CurrentUser
                      Install-Module -Name Pester -Force -Scope CurrentUser -SkipPublisherCheck -AllowClobber

  ComponentValidateIIS:
    Type: AWS::ImageBuilder::Component
    Properties:
      Name: !Sub ${Prefix}-windows-iis-response-test
      Platform: Windows
      Version: 1.0.1
      Data: |
        name: "windows-iis-response-test"
        description: "Checks if IIS is returning correct HTTP response"
        schemaVersion: 1.0
        phases:
          - name: test
            steps:
              - name: HttpResponseTest
                action: ExecutePowerShell
                maxAttempts: 3
                inputs:
                  commands:
                    - |
                      Import-module Pester
                      $PesterPreference = [PesterConfiguration]::Default
                      $PesterPreference.TestResult.Enabled = $true
                      $PesterPreference.Output.Verbosity = 'detailed'
                      $PesterPreference.Run.Exit = $true

                      Describe "IIS validation test" {
                          BeforeAll {
                              $httpResponse = Invoke-WebRequest localhost -UseBasicParsing
                          }
                          It "IIS should return HTTP 200 OK from 'Microsoft-IIS'" {
                              $httpResponse.Headers['server'] | Should -Match 'Microsoft-IIS'
                              $httpResponse.StatusCode | Should -BeExactly 200
                              $httpResponse.StatusDescription | Should -BeExactly 'OK'
                          }
                      }
